import logging
from typing import List

# Configuration, models, methods and authentication modules imports
from app.api.config.db import (add_item, delete_item, find_item, get_items,
                               update_item)
from app.api.config.env import API_NAME
from app.api.config.limiter import limiter
from app.api.methods.methods import convert_objectid_to_str, is_valid_objectid
from app.api.models.models import Item, ItemCreate, ItemPatch, ResponseError
from app.bot.nova_bot import NovaBot
from fastapi import APIRouter, HTTPException, Request, status
from slowapi.errors import RateLimitExceeded

router = APIRouter()

# Log file name
log_filename = f"api_{API_NAME}.log"

# Configurate the logging level to catch all messages from DEBUG onwards
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] - %(message)s",
    handlers=[logging.FileHandler(log_filename), logging.StreamHandler()],
)

logger = logging.getLogger(__name__)

bot = NovaBot()


@router.get(
    "/",
    responses={
        500: {"model": ResponseError, "description": "Internal server error."},
        429: {"model": ResponseError, "description": "Too many requests."},
    },
)
@limiter.limit("5/minute")
def chatbot(question: str, request: Request):
    """
    Endpoint to handle chatbot queries.

    Args:
        question (str): The question asked by the user.
        request (Request): The request object containing metadata about the request.

    Returns:
        JSON: The response generated by the NovaBot.
    """
    return bot.generate_response(question=question)
